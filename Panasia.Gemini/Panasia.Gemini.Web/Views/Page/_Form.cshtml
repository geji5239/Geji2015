@model FormActionViewModel

@functions{ 
    public void CreateDataView(System.Text.StringBuilder sbHtml, DataView model, object dataContext = null)
    {
        AppendString(sbHtml, "<form ");
        AppendString(sbHtml, model.GetBaseAttribtes());
        AppendString(sbHtml, " method=\"post\">"); 

        CreateGridBox(sbHtml, model, dataContext);
        
        AppendString(sbHtml, "</form>");
    }

    public void CreateGridBox(System.Text.StringBuilder sbHtml, GridBox model, object dataContext = null)
    {
        if (model.UseTableLayout)
        {
            CreateTable(sbHtml, model, dataContext);
        }
        else
        {
            CreatePanel(sbHtml, model, dataContext);
        }
    }

    public void CreatePanel(System.Text.StringBuilder sbHtml, Panel model, object dataContext = null)
    {
        object dataItem = null;
        if(model is DataView)
        {
            var dataBinding = GetParameterValue(dataContext, model.Binding);
            if (dataBinding != null && (dataBinding is IList))
            {
                var list = dataBinding as IList;
                dataItem = list.Count > 0 ? list[0] : null;
            }
            else
            {
                dataItem = dataBinding;
            }
        }
        else
        {
            dataItem = dataContext;
        }

        if(model.IsContainer)
        {
            AppendString(sbHtml, "<div");
            AppendString(sbHtml, model.Options.ToFormatIfNotEmpty(" data-options=\"{0}\""));
            AppendString(sbHtml, model.GetBaseAttribtes());
            AppendString(sbHtml, ">"); 
        }
        foreach (var control in model.Controls)
        {
            CreateControl(sbHtml, control, dataItem);
        }
        if(model.IsContainer)
        {
            AppendString(sbHtml, "</div>"); 
        }
    }

    public void CreateTable(System.Text.StringBuilder sbHtml, GridBox model, object dataContext = null)
    {
        AppendString(sbHtml, "<table");
        AppendString(sbHtml, model.GetBaseAttribtes());
        AppendString(sbHtml, ">");
        int rowIndex = 0;
        int colIndex = 0;

        foreach (var row in model.Controls.GroupBy(c => c.Row).OrderBy(d => d.Key))
        {
            if (row.Key > rowIndex)
            {
                for (int i = 0; i < row.Key - rowIndex; i++)
                {
                    AppendString(sbHtml, "<tr></tr>");
                }
                rowIndex = row.Key;
            }
            AppendString(sbHtml, "<tr>");
            colIndex = 0;
            foreach (var control in row.OrderBy(d => d.Column))
            {
                if (control.Column > colIndex)
                {
                    for (int i = 0; i < control.Column - colIndex; i++)
                    {
                        AppendString(sbHtml, "<td></td>");
                    }
                    colIndex = control.Column;
                }
                AppendString(sbHtml, control.ColumnSpan > 1 ? string.Format("<td colspan=\"{0}\">", control.ColumnSpan) : "<td >");
                CreateControl(sbHtml, control, dataContext);
                AppendString(sbHtml, "</td>");
                colIndex = control.ColumnSpan > 1 ? colIndex + control.ColumnSpan : colIndex + 1;
            }
            AppendString(sbHtml, "</tr>");
            rowIndex++;
        }
        AppendString(sbHtml, "</table>");
    }

    public void CreateHtmlStart(System.Text.StringBuilder sbHtml, ControlBase control, string tag)
    {
        AppendString(sbHtml, string.Format("<{0}{1}>", tag, control.GetBaseAttribtes()));
    }
    public void CreateHtmlEnd(System.Text.StringBuilder sbHtml, string tag)
    {
        AppendString(sbHtml, string.Format("</{0}>", tag));
    }

    public void CreateLabel(System.Text.StringBuilder sbHtml, Label control, object dataContext = null)
    {
        CreateHtmlStart(sbHtml, control, "label");
        AppendString(sbHtml, control.Title);
        CreateHtmlEnd(sbHtml, "label");
    }

    public void CreateButton(System.Text.StringBuilder sbHtml, Button control, object dataContext = null)
    {
        if((control.ActionValue & Model.ActionValue) == control.ActionValue)
        {
            AppendString(sbHtml, string.Format("<a{1} href=\"#\" {2}{3}>{0}</a>",
                control.Title, control.GetBaseAttribtes(),
                control.Action.ToFormatIfNotEmpty(" onclick=\"{0}\""),
                control.Options.ToFormatIfNotEmpty(" data-options=\"{0}\""))); 
        }
    }

    public void CreateTextBox(System.Text.StringBuilder sbHtml, TextBox control,object dataContext=null)
    {
        if(control.IsMutiLine)
        {
            CreateTextarea(sbHtml, control, dataContext);
            return;
        }
        var value = string.IsNullOrEmpty(control.Binding)?null: GetParameterValue(dataContext, control.Binding);
        AppendString(sbHtml, string.Format("<input{0} {1}{2}{3}{4}{5}{6}/>", control.GetBaseAttribtes(),
            control.Options.ToFormatIfNotEmpty(" data-options=\"{0}\""),
            value == null ? "" : string.Format(" value=\"{0}\"", value),
            control.IsEnable ? "" : " disabled=\"disabled\"",
            control.IsReadOnly ? " readonly=\"readonly\"" : "",
            control.IsHidden ? " type=\"hidden\"" : "",
            control.Length != 0 ? " maxlength=\"" + control.Length + "\"" : ""));
    }
        
    public void CreateTextarea(System.Text.StringBuilder sbHtml, TextBox control, object dataContext = null)
    {
        var value = string.IsNullOrEmpty(control.Binding) ? null : GetParameterValue(dataContext, control.Binding);
        AppendString(sbHtml, string.Format("<textarea{0} {1}{3}{4}{5}>{2}</textarea>", control.GetBaseAttribtes(),
            control.Options.ToFormatIfNotEmpty(" data-options=\"{0}\""),
            value == null ? "" : value,
            control.IsEnable ? "" : " disabled=\"disabled\"",
            control.IsReadOnly ? " readonly=\"readonly\"" : "",
            control.Length != 0 ? " maxlength=\"" + control.Length + "\"" : ""));
    }

    public void CreateComboBox(System.Text.StringBuilder sbHtml, ComboBox control, object dataContext = null)
    {
        var value = string.IsNullOrEmpty(control.Binding) ? null : GetParameterValue(dataContext, control.Binding);
        AppendString(sbHtml, string.Format("<select{0} {1} panelheight='auto'>", control.GetBaseAttribtes(),
            control.Options.ToFormatIfNotEmpty(" data-options=\"{0}\"")));

        //AppendString(sbHtml,string.Format("<option value=\"\">无</option>"));
        
        var itemsSource = GetParameterValue(dataContext, control.ItemsSource);
        if (itemsSource != null)
        {
            if (itemsSource is string)
            {
                foreach (var item in (itemsSource as string).ToDictionary())
                {
                    AppendString(sbHtml, string.Format("<option value=\"{0}\"{2}>{1}</option>", item.Key, item.Value
                        , (value != null && value.Equals(item.Key)) ? " selected" : ""));
                }
            }
            else if (itemsSource is System.Collections.IEnumerable)
            {
                foreach (var item in (itemsSource as System.Collections.IEnumerable))
                {
                    var pValue = item.GetPathValue(control.ValueMember);
                    AppendString(sbHtml, string.Format("<option value=\"{0}\"{2}>{1}</option>",
                        item.GetPathValue(control.ValueMember), item.GetPathValue(control.DisplayMemeber)
                        , (value != null && value.Equals(pValue)) ? " selected" : ""));
                }
            }
            else
            {
                //throw new Exception(string.Format("不支持的数据源类型[{0}:{1}——{2}]",
                //    control.DisplayMemeber
                //    ,control.ItemsSource, itemsSource.GetType().FullName));
            }
        }
        AppendString(sbHtml, "</select>");
    }

    public void CreateGridView(System.Text.StringBuilder sbHtml, GridView grid, object dataContext = null)
    {
        AppendString(sbHtml, string.Format("<table {0} {1} >", grid.GetBaseAttribtes(),
            grid.Options.ToFormatIfNotEmpty(" data-options=\"{0}\"")));

        AppendString(sbHtml, "<thead>");
        AppendString(sbHtml, "<tr>");
        if (!string.IsNullOrEmpty(grid.Key))
        {
            AppendString(sbHtml, string.Format("<th data-options=\"field:'{0}',checkbox:true\"></th>", grid.Key));
        }
        foreach (var column in grid.Columns)
        {
            AppendString(sbHtml, string.Format("<th data-options=\"field:'{0}',fixed:true,\">{1}</th>", column.FieldName, column.Title));
        }
        AppendString(sbHtml, "</tr>");
        AppendString(sbHtml, "</thead>");
        CreateHtmlEnd(sbHtml, "table");
    }

    public void CreateControl(System.Text.StringBuilder sbHtml, ControlBase control, object dataContext = null)
    {
        switch (control.GetType().Name)
        {
            case "Label": CreateLabel(sbHtml, (Label)control,dataContext); break;
            case "Button": CreateButton(sbHtml, (Button)control, dataContext); break;
            case "TextBox": CreateTextBox(sbHtml, (TextBox)control, dataContext); break;
            case "CheckBox": CreateControl(sbHtml, (CheckBox)control, dataContext); break;
            case "ComboBox": CreateComboBox(sbHtml, (ComboBox)control, dataContext); break;
            case "PickBox": CreateControl(sbHtml, (PickBox)control, dataContext); break;
            case "DateBox": CreateControl(sbHtml, (DateBox)control, dataContext); break;
            case "ImageBox": CreateControl(sbHtml, (ImageBox)control, dataContext); break;
            case "GridView": CreateGridView(sbHtml, (GridView)control, dataContext); break;
            case "DataView": CreateDataView(sbHtml, (DataView)control, dataContext); break;
            case "StackPanel": CreatePanel(sbHtml, (StackPanel)control, dataContext); break;
            case "ToolBar": CreatePanel(sbHtml, (ToolBar)control, dataContext); break;
            case "GridBox": CreateGridBox(sbHtml, (GridBox)control, dataContext); break;
            default:
                break;
        }
    }

    public object GetParameterValue(object dataContext, string path)
    {
        if (dataContext == null)
        {
            return null;
        }
        if (string.IsNullOrEmpty(path))
        {
            return dataContext;
        }
        if(path.StartsWith("/") || path.StartsWith("\\"))
        {
            return GetParameterValue(Model,path.Substring(1));
        }
        return dataContext.GetPathValue(path);        
    }

    public void AppendString(System.Text.StringBuilder sb, string str)
    {
        if (str.StartsWith("<"))
        {
            sb.Append("\r\n");
        }
        sb.Append(str);
    }

    public HtmlString CreateForm(Form form)
    {
        var sbHtml = new System.Text.StringBuilder();
        CreateGridBox(sbHtml, form,Model);
        return new HtmlString(sbHtml.ToString());
    }
}

@CreateForm(Model.Form)